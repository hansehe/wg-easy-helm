# Default values for wg-easy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

enabled: true
replicaCount: 1

image:
  repository: ghcr.io/wg-easy/wg-easy
  pullPolicy: IfNotPresent
  versionOverride: "*"

# This will enable IP forwarding and NAT masquerading
# This is required for the VPN to work in full tunnel mode
# command:
#   - /bin/sh
#   - -c
#   - |
#     echo "Enabling IP forwarding"
#     sysctl -w net.ipv4.ip_forward=1
#     iptables -t nat -F POSTROUTING
#     iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -o eth0 -j MASQUERADE
#     exec node server.js

healthCheckUrl: /
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
terminationGracePeriodSeconds: 10
environmentVariables:
  # WAN IP or a Dynamic DNS hostname.
  WG_HOST: localhost
  # Password for the UI. docker run -it ghcr.io/wg-easy/wg-easy wgpw
  PASSWORD_HASH: password_hash

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

secret:
  # Create a secret to store the environment variables. Disabling this
  # and setting a secret name allows users to bring their own secret
  # via the external-secrets-operator or similar. 
  create: false
  # The name of the secret to use.
  # If not set and create is true, a name is generated using the fullname template.
  name:

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  privileged: true
  allowPrivilegeEscalation: true
  capabilities:
    add:
      - NET_ADMIN
      - SYS_MODULE
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 51821
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: "/"
  headless:
    annotations: {}

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
  hosts:
    - host: wg-easy.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: wg-easy-tls
  #    hosts:
  #      - wg-easy.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

volume:
  enabled: true
  className: ""
  size: 100m
  annotations:
    helm.sh/resource-policy: "keep"

tests:
  enabled: true
